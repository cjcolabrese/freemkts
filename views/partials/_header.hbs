<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
<script src="https://ajax.googleapis.com/ajax/libs/jqueryui/1.12.1/jquery-ui.min.js"></script>
<link
  href="https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&family=Ubuntu:ital,wght@0,300;0,400;0,500;0,700;1,300;1,400;1,500;1,700&display=swap"
  rel="stylesheet">
<style>
  /* Basic styling for the suggestion box */
  .dropdown {
    font-size: 12px;
  }

  #search {
    border: none;
    background-color: #2f2f2f;
    height: 25px;
    font-family: 'Poppins' !important;
  }

  #suggestions {
    border: none;
    max-height: 200px;
    overflow-y: auto;
    position: absolute;
    background-color: #1B1B1F;
    color: grey;
    z-index: 1000;
    width: 400px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    font-family: 'Poppins' !important;
    font-weight: 100;
  }

  .suggestion-item {
    padding: 8px;
    cursor: pointer;
    color: white;
    background-color: #1B1B1F;
    font-family: 'Poppins' !important;
  }

  .suggestion-item:hover {
    color: #37E38B;
    background-color: black;
  }

  ul {
    list-style-type: none;
  }


  .material-symbols-outlined {
    margin-right: 15px;
    /* Adjusted margin */
  }
  .profile-icon {
    color: white;
  }
  #logout-button {
    color: white;
    text-decoration: none;
  }
  #logout-button:hover {
    color:#37E38B;
  }
    #logout-button:hover i {
    color:#37E38B;
  }
</style>


<header class="mdl-layout__header" id="hdr">
  <div class="mdl-layout__header-row">
    <!-- Title -->
    <span class="mdl-layout-title"><img style="height: 50px;" src="/public/logo-no-background.png"></span>
    <!-- Add spacer, to align navigation to the right -->
    <div class="mdl-layout-spacer"></div>
    <!-- Navigation. We hide it in small screens. -->
    <nav class="mdl-navigation mdl-layout--large-screen-only">
      <!-- Expandable Textfield -->

      <div class="mdl-layout-spacer" style="margin-right: 30px;">
        <form action="#">
          <div class="mdl-textfield mdl-js-textfield" style="position: relative; width: 300px; border: none;">
            <input placeholder="Search" class="mdl-textfield__input" type="text" id="search" autocomplete="off"
              style="margin-right: 25px !important;background-color: #2E2E38; height: 30px; border-radius: 5px; padding: 10px;">

            <div id="suggestions"></div>
          </div>
        </form>
      </div>
      <img src="{{userData.image}}" style="border-radius: 50%; height: 30px;" id="header-avatar" />
    </nav>
  </div>
</header>
<div class="mdl-layout__drawer" id="drawer">
  <span class="mdl-layout-title">{{userData.displayName}}</span>
  <nav class="mdl-navigation">
    <div class="dropdown">
      <a class="mdl-navigation__link" href="/user/dashboard">
        <span><span class="material-icons dr-icons">dashboard</span>Dashboard</span>
        <!--     <span class="material-icons dropdown-icon" data-target="dropdown">expand_more</span> -->
      </a>
      <!--  <ul class="dropdown-content" >
                    <li style="margin: 0 auto; height: 40px;"><a class="mdl-navigation__link dropdown" href="/user/portfolio"><span class="material-symbols-outlined">pie_chart</span>Portfolio</a></li>
                    <li><a class="mdl-navigation__link dropdown" href="/user/dashboard"><span class="material-symbols-outlined">dashboard</span>Dashboard</a></li>
                </ul> -->
    </div>
    <div class="dropdown">
      <a class="mdl-navigation__link dr-link" href="#">
        <span><span class="material-icons dr-icons">bar_chart</span>Stocks</span>
        <span class="material-icons dropdown-icon" data-target="dropdown2">expand_more</span>
      </a>
      <ul class="dropdown-content" id="dropdown2">
        <li><a class="mdl-navigation__link dropdown" href="/stocks/most-active"><span
              class="material-symbols-outlined">finance</span>Most Active</a></li>
        <li><a class="mdl-navigation__link dropdown" href="/stocks/gainers"><span
              class="material-symbols-outlined">trending_up</span>Gainers</a></li>
        <li><a class="mdl-navigation__link dropdown" href="/stocks/losers"><span
              class="material-symbols-outlined">trending_down</span>Losers</a></li>
        <li><a class="mdl-navigation__link dropdown" href="/stocks/sectors"><span
              class="material-symbols-outlined">list</span>Sectors</a></li>
        <li><a class="mdl-navigation__link dropdown" href="/stocks/corporate-actions"><span
              class="material-symbols-outlined">report_problem</span>Coporate Actions</a></li>
        <li><a class="mdl-navigation__link dropdown" href="/stocks/ipos"><span
              class="material-symbols-outlined">today</span>IPOs</a></li>
      </ul>
    </div>
    <div class="dropdown">
      <a class="mdl-navigation__link dr-link" href="/rates/all-rates">
        <span><span class="material-icons dr-icons">account_balance</span>Rates</span>
        <!--  <span class="material-icons dropdown-icon" data-target="dropdown3">expand_more</span> -->
      </a>
      <!-- <ul class="dropdown-content" id="dropdown3">
                    <li><a class="mdl-navigation__link dropdown" href="/rates/all-rates"><span class="material-symbols-outlined">sell</span>All Rates</a></li>
                </ul> -->
    </div>
    <div class="dropdown">
      <a class="mdl-navigation__link dr-link" href="/currencies/all-currencies">
        <span><span class="material-icons dr-icons">local_atm</span>Currencies</span>
        <!--   <span class="material-icons dropdown-icon" data-target="dropdown4">expand_more</span> -->
      </a>
      <!--    <ul class="dropdown-content" id="dropdown4">
                    <li><a class="mdl-navigation__link dropdown" href="/currencies/all-currencies"><span class="material-symbols-outlined">euro</span>All Currencies</a></li>
                </ul> -->
    </div>
    <div class="dropdown">
      <a class="mdl-navigation__link dr-link" href="/commodities/all-commodities">
        <span><span class="material-icons dr-icons">oil_barrel</span>Commodities</span>
        <!--    <span class="material-icons dropdown-icon" data-target="dropdown5">expand_more</span> -->
      </a>
      <!-- <ul class="dropdown-content" id="dropdown5">
                    <li><a class="mdl-navigation__link dropdown" href="/commodities/all-commodities"><span class="material-symbols-outlined">oil_barrel</span>Commodities</a></li>
                </ul> -->
    </div>
    <div class="dropdown">
      <a class="mdl-navigation__link dr-link" href="/realestate">
        <span><span class="material-icons dr-icons">home</span>Real Estate</span>

      </a>
  
    </div>
    <div class="dropdown">
      <a class="mdl-navigation__link dr-link" href="#">
        <span><span class="material-icons dr-icons">search</span>Searches</span>
        <span class="material-icons dropdown-icon" data-target="dropdown6">expand_more</span>
      </a>
      <ul class="dropdown-content" id="dropdown6">
        <div id="searches-container"></div>
      </ul>
    </div>
  </nav>
</div>


<style>

</style>
<div id="more">
  <ul class="demo-list-icon mdl-list">
    <li class="mdl-list__item">
      <span class="mdl-list__item-primary-content" style="color: white; top: 0px;">
        <i class="material-icons mdl-list__item-icon profile-icon">person</i>
        {{userData.firstName}}
      </span>
    </li>
  <li class="mdl-list__item">
      <span class="mdl-list__item-primary-content" style="color: white; top: 0px;">
        <i class="material-icons mdl-list__item-icon profile-icon">logout</i>
        <a id="logout-button" href="/auth/logout">Logout</a>
      </span>
    </li>
  </ul>
</div>
<style>
  #more {
    background: #1B1B1F;
    height: 300px;
    width: 200px;
    display: none;
    margin-top: 65px;
    position: absolute;
  }
</style>

<script>
  $('#header-avatar').hover(
    function () {
      $('#more').fadeIn();
    }
  );

  $('#more').hover(
    function () {
      $(this).addClass('show');
    },
    function () {
      $(this).removeClass('show').fadeOut();
    }
  );
</script>


<script>
  document.addEventListener('DOMContentLoaded', function () {
    // Fetch data from the server
    fetch('/user/searches')
      .then(response => {
        if (!response.ok) {
          throw new Error('Network response was not ok');
        }
        return response.json();
      })
      .then(data => {
        // Log the raw data for debugging
        console.log('Fetched searches data:', data);

        // Get the container element
        const container = document.getElementById('searches-container');

        // Check if data is an array
        if (Array.isArray(data)) {
          if (data.length > 0) {
            // Create a list element
            const ul = document.createElement('ul');

            // Iterate over the searches and create list items
            data.forEach(search => {
              const li = document.createElement('li');
              li.innerHTML = `
                                    <strong>Search Term:</strong> ${search.term || 'N/A'} <br>
                                    <strong>Date:</strong> ${new Date(search.date).toLocaleString() || 'N/A'}
                                `;
              ul.appendChild(li);
            });

            // Append the list to the container
            container.appendChild(ul);
          } else {
            // Display a message if no searches are found
            container.innerHTML = '<p>No searches found.</p>';
          }
        } else {
          console.error('Data is not in expected format:', data);
          container.innerHTML = '<p>Error: Data is in an unexpected format.</p>';
        }
      })
      .catch(error => {
        console.error('Error fetching or processing data:', error);
        document.getElementById('searches-container').innerHTML = '<p>Error loading searches.</p>';
      });
  });
</script>







<script>
  document.querySelectorAll('.dropdown').forEach(dropdown => {
    dropdown.addEventListener('click', (event) => {
      const dropdownContent = dropdown.querySelector('.dropdown-content');
      dropdownContent.style.display = dropdownContent.style.display === 'block' ? 'none' : 'block';
    });
  });

  // Close the dropdown if clicked outside of it
  window.addEventListener('click', (event) => {
    if (!event.target.matches('.mdl-navigation__link, .mdl-navigation__link *')) {
      document.querySelectorAll('.dropdown-content').forEach(dropdownContent => {
        dropdownContent.style.display = 'none';
      });
    }
  });
</script>





<!----------------SEARCH FUNCTIONALITY------------------>
<script>
  document.addEventListener('DOMContentLoaded', function () {
    const apiKey = 'vGUG0vEZx4BwUtU7Zdg4KR2rNVqHWXbp';
    const searchInput = document.getElementById('search');
    const suggestionsContainer = document.getElementById('suggestions');

    // Function to fetch data from FMP search API
    async function fetchSearchSuggestions(query) {
      try {
        const response = await fetch(`https://financialmodelingprep.com/api/v3/search?query=${query}&apikey=${apiKey}`);
        if (!response.ok) {
          throw new Error('Network response was not ok');
        }
        const data = await response.json();
        console.log('Fetched suggestions:', data); // Debugging statement
        return data;
      } catch (error) {
        console.error('Fetch error:', error);
        return []; // Return an empty array in case of error
      }
    }

    // Function to update the suggestions list
    async function updateSuggestions() {
      const query = searchInput.value;
      suggestionsContainer.innerHTML = ''; // Clear previous suggestions

      if (query.length > 2) { // Start searching after 3 characters
        const suggestions = await fetchSearchSuggestions(query);
        console.log('Suggestions data:', suggestions); // Debugging statement

        if (suggestions.length > 0) {
          // Generate suggestion list items with links
          suggestions.forEach(suggestion => {
            const item = document.createElement('div');
            item.classList.add('suggestion-item');

            // Create a link element
            const link = document.createElement('a');
            link.href = `/stocks/${suggestion.symbol}`;
            link.textContent = `${suggestion.symbol} - ${suggestion.name}`;
            link.style.textDecoration = 'none'; // Remove underline
            link.style.color = 'inherit'; // Inherit color from parent

            // Add click event to the link to handle redirect
            link.addEventListener('click', (event) => {
              event.preventDefault();
              window.location.href = link.href; // Redirect to the stock page
            });

            item.appendChild(link);
            suggestionsContainer.appendChild(item);
          });
        } else {
          // If no suggestions, show a message
          const noResult = document.createElement('div');
          noResult.classList.add('suggestion-item');
          noResult.textContent = 'No results found';
          suggestionsContainer.appendChild(noResult);
        }
      }
    }

    // Add event listener for input changes
    searchInput.addEventListener('input', updateSuggestions);

    // Hide suggestions when clicking outside
    document.addEventListener('click', (e) => {
      if (!searchInput.contains(e.target) && !suggestionsContainer.contains(e.target)) {
        suggestionsContainer.innerHTML = '';
      }
    });
  });

</script>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    const fmpApiKey = 'tp2tNRoJlDmorJqTJoXeUtslnhlqImum';
    const twelvedataApiKey = '4198770003984699a71ef335b17b310b';
    const searchInput = document.getElementById('search');
    const suggestionsContainer = document.getElementById('suggestions');

    // Function to fetch data from FMP search API
    async function fetchFmpSuggestions(query) {
      try {
        const response = await fetch(`https://financialmodelingprep.com/api/v3/search?query=${query}&apikey=${fmpApiKey}`);
        if (!response.ok) {
          throw new Error('Network response was not ok');
        }
        const data = await response.json();
        console.log('Fetched FMP suggestions:', data); // Debugging statement
        return data;
      } catch (error) {
        console.error('Fetch error:', error);
        return []; // Return an empty array in case of error
      }
    }

    // Function to fetch data from 12data ETF API
    async function fetchEtfSuggestions(query) {
      try {
        const response = await fetch(`https://api.twelvedata.com/etf?symbol=${query}&apikey=${twelvedataApiKey}`);
        if (!response.ok) {
          throw new Error('Network response was not ok');
        }
        const data = await response.json();
        console.log('Fetched 12data ETF suggestions:', data.data); // Debugging statement
        return data.data;
      } catch (error) {
        console.error('Fetch error:', error);
        return []; // Return an empty array in case of error
      }
    }

    // Function to save search term to user.searches
      async function saveSearchTerm(searchTerm) {
          try {
              const response = await fetch('/stocks/save-search', {
                  method: 'POST',
                  headers: {
                      'Content-Type': 'application/json'
                  },
                  body: JSON.stringify({ search: searchTerm })
              });
              const result = await response.json();
              if (response.ok) {
                  console.log('Search term saved successfully:', result);
              } else {
                  console.error('Failed to save search term:', result);
              }
          } catch (error) {
              console.error('Error saving search term:', error);
          }
      }


    // Function to update the suggestions list
    async function updateSuggestions() {
      const query = searchInput.value;
      suggestionsContainer.innerHTML = ''; // Clear previous suggestions

      if (query.length > 2) { // Start searching after 3 characters
        const fmpSuggestions = await fetchFmpSuggestions(query);
        const etfSuggestions = await fetchEtfSuggestions(query);
        const suggestions = [...fmpSuggestions, ...etfSuggestions];
        console.log('Combined suggestions data:', suggestions); // Debugging statement

        if (suggestions.length > 0) {
          // Generate suggestion list items with links
          suggestions.forEach(suggestion => {
            const item = document.createElement('div');
            item.classList.add('suggestion-item');

            // Create a link element
            const link = document.createElement('a');
            const symbol = suggestion.symbol || suggestion.symbol;
            const name = suggestion.name || suggestion.name;
            link.href = `/stocks/${symbol}`;
            link.textContent = `${symbol} - ${name}`;
            link.style.textDecoration = 'none'; // Remove underline
            link.style.color = 'inherit'; // Inherit color from parent

            // Add click event to the link to handle redirect
            link.addEventListener('click', async (event) => {
              event.preventDefault();
              await saveSearchTerm(symbol); // Save the search term
              window.location.href = link.href; // Redirect to the stock page
            });

            item.appendChild(link);
            suggestionsContainer.appendChild(item);
          });
        } else {
          // If no suggestions, show a message
          const noResult = document.createElement('div');
          noResult.classList.add('suggestion-item');
          noResult.textContent = 'No results found';
          suggestionsContainer.appendChild(noResult);
        }
      }
    }

    // Add event listener for input changes
    searchInput.addEventListener('input', updateSuggestions);

    // Hide suggestions when clicking outside
    document.addEventListener('click', (e) => {
      if (!searchInput.contains(e.target) && !suggestionsContainer.contains(e.target)) {
        suggestionsContainer.innerHTML = '';
      }
    });
  });
</script>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        const fmpApiKey = 'mOWqq9X8i9MNpGQF7QEL3Eo3iOLzrRGP';
        const twelvedataApiKey = '4198770003984699a71ef335b17b310b';
        const searchInput = document.getElementById('search');
        const suggestionsContainer = document.getElementById('suggestions');

        // Function to fetch data from FMP search API
        async function fetchFmpSuggestions(query) {
            try {
                const response = await fetch(`https://financialmodelingprep.com/api/v3/search?query=${query}&apikey=${fmpApiKey}`);
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                const data = await response.json();
                console.log('Fetched FMP suggestions:', data); // Debugging statement
                return data;
            } catch (error) {
                console.error('Fetch error:', error);
                return []; // Return an empty array in case of error
            }
        }

        // Function to fetch data from 12data ETF API
        async function fetchEtfSuggestions(query) {
            try {
                const response = await fetch(`https://api.twelvedata.com/etf?symbol=${query}&apikey=${twelvedataApiKey}`);
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                const data = await response.json();
                console.log('Fetched 12data ETF suggestions:', data.data); // Debugging statement
                return data.data;
            } catch (error) {
                console.error('Fetch error:', error);
                return []; // Return an empty array in case of error
            }
        }

        // Function to save search term to user.searches

        // Function to update the suggestions list
        async function updateSuggestions() {
            const query = searchInput.value;
            suggestionsContainer.innerHTML = ''; // Clear previous suggestions

            if (query.length > 2) { // Start searching after 3 characters
                const fmpSuggestions = await fetchFmpSuggestions(query);
                const etfSuggestions = await fetchEtfSuggestions(query);
                const suggestions = [...fmpSuggestions, ...etfSuggestions];
                console.log('Combined suggestions data:', suggestions); // Debugging statement

                if (suggestions.length > 0) {
                    // Generate suggestion list items with links
                    suggestions.forEach(suggestion => {
                        const item = document.createElement('div');
                        item.classList.add('suggestion-item');

                        // Create a link element
                        const link = document.createElement('a');
                        const symbol = suggestion.symbol || suggestion.symbol;
                        const name = suggestion.name || suggestion.name;
                        link.href = `/stocks/${symbol}`;
                        link.textContent = `${symbol} - ${name}`;
                        link.style.textDecoration = 'none'; // Remove underline
                        link.style.color = 'inherit'; // Inherit color from parent

                        // Add click event to the link to handle redirect
                        link.addEventListener('click', async (event) => {
                            event.preventDefault();
                            await saveSearchTerm(symbol); // Save the search term
                            window.location.href = link.href; // Redirect to the stock page
                        });

                        item.appendChild(link);
                        suggestionsContainer.appendChild(item);
                    });
                } else {
                    // If no suggestions, show a message
                    const noResult = document.createElement('div');
                    noResult.classList.add('suggestion-item');
                    noResult.textContent = 'No results found';
                    suggestionsContainer.appendChild(noResult);
                }
            }
        }

        // Add event listener for input changes
        searchInput.addEventListener('input', updateSuggestions);

        // Hide suggestions when clicking outside
        document.addEventListener('click', (e) => {
            if (!searchInput.contains(e.target) && !suggestionsContainer.contains(e.target)) {
                suggestionsContainer.innerHTML = '';
            }
        });
    });
</script>
<script>
    document.addEventListener('DOMContentLoaded', function () {
        const fmpApiKey = 'mOWqq9X8i9MNpGQF7QEL3Eo3iOLzrRGP';
        const twelvedataApiKey = '4198770003984699a71ef335b17b310b';
        const searchInput = document.getElementById('search');
        const suggestionsContainer = document.getElementById('suggestions');

        // Function to fetch data from FMP search API
        async function fetchFmpSuggestions(query) {
            try {
                const response = await fetch(`https://financialmodelingprep.com/api/v3/search?query=${query}&apikey=${fmpApiKey}`);
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                const data = await response.json();
                console.log('Fetched FMP suggestions:', data); // Debugging statement
                return data;
            } catch (error) {
                console.error('Fetch error:', error);
                return []; // Return an empty array in case of error
            }
        }

        // Function to fetch data from 12data ETF API
        async function fetchEtfSuggestions(query) {
            try {
                const response = await fetch(`https://api.twelvedata.com/etf?symbol=${query}&apikey=${twelvedataApiKey}`);
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                const data = await response.json();
                console.log('Fetched 12data ETF suggestions:', data.data); // Debugging statement
                return data.data;
            } catch (error) {
                console.error('Fetch error:', error);
                return []; // Return an empty array in case of error
            }
        }

        // Function to save search term to user.searches
        async function saveSearchTerm(searchTerm) {
            try {
                const response = await fetch('/stocks/save-search', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ search: searchTerm })
                });
                const result = await response.json();
                if (response.ok) {
                    console.log('Search term saved successfully:', result);
                } else {
                    console.error('Failed to save search term:', result);
                }
            } catch (error) {
                console.error('Error saving search term:', error);
            }
        }

        // Function to update the suggestions list
        async function updateSuggestions() {
            const query = searchInput.value;
            suggestionsContainer.innerHTML = ''; // Clear previous suggestions

            if (query.length > 2) { // Start searching after 3 characters
                const fmpSuggestions = await fetchFmpSuggestions(query);
                const etfSuggestions = await fetchEtfSuggestions(query);
                const suggestions = [...fmpSuggestions, ...etfSuggestions];
                console.log('Combined suggestions data:', suggestions); // Debugging statement

                if (suggestions.length > 0) {
                    // Generate suggestion list items with links
                    suggestions.forEach(suggestion => {
                        const item = document.createElement('div');
                        item.classList.add('suggestion-item');

                        // Create a link element
                        const link = document.createElement('a');
                        const symbol = suggestion.symbol || suggestion.symbol;
                        const name = suggestion.name || suggestion.name;
                        link.href = `/stocks/${symbol}`;
                        link.textContent = `${symbol} - ${name}`;
                        link.style.textDecoration = 'none'; // Remove underline
                        link.style.color = 'inherit'; // Inherit color from parent

                        // Add click event to the link to handle redirect
                        link.addEventListener('click', async (event) => {
                            event.preventDefault();
                            await saveSearchTerm(symbol); // Save the search term
                            window.location.href = link.href; // Redirect to the stock page
                        });

                        item.appendChild(link);
                        suggestionsContainer.appendChild(item);
                    });
                } else {
                    // If no suggestions, show a message
                    const noResult = document.createElement('div');
                    noResult.classList.add('suggestion-item');
                    noResult.textContent = 'No results found';
                    suggestionsContainer.appendChild(noResult);
                }
            }
        }

        // Add event listener for input changes
        searchInput.addEventListener('input', updateSuggestions);

        // Hide suggestions when clicking outside
        // Hide suggestions when clicsearchking outside
        document.addEventListener('click', (e) => {
            if (!searchInput.contains(e.target) && !suggestionsContainer.contains(e.target)) {
                suggestionsContainer.innerHTML = '';
            }
        });
    });
</script>