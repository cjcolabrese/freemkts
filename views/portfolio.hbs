<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.amcharts.com/lib/4/core.js"></script>
<script src="https://cdn.amcharts.com/lib/4/charts.js"></script>
<script src="https://cdn.amcharts.com/lib/4/themes/animated.js"></script>
<style>
    .form-container {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        display: flex;
        justify-content: center;
        align-items: center;
        background-color: rgba(0, 0, 0, 0.5);
        /* semi-transparent background */
        z-index: 1000;
        /* higher z-index to ensure it's above other elements */
        overflow: auto;
        /* allow scrolling if content exceeds viewport */
        padding: 20px;
        }

    .modal-content {
        background-color: #fefefe;
        padding: 20px;
        border: 1px solid #888;
        width: 80%;
        max-width: 600px;
        border-radius: 8px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);
        position: relative;
        }

    .colorred {
        color: rgb(197, 55, 55);
        font-weight: 200;
        margin: 0 auto;
        }

    .form-group {
        margin-bottom: 15px;
        }

    .form-group label {
        display: block;
        margin-bottom: 5px;
        }

    .form-group input,
    .form-group textarea {
        width: 100%;
        padding: 10px;
        box-sizing: border-box;
        }

    .form-group button {
        padding: 10px 15px;
        background-color: #28a745;
        color: white;
        border: none;
        cursor: pointer;
        }

    .form-group button:hover {
        background-color: #218838;
        }

    .form-container {
        max-width: 600px;
        margin: 0 auto;
        background-color: #fff;
        padding: 20px;
        top: 100px;
        border-radius: 8px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        position: fixed;
        display: none;
        z-index: 1000;
        /* Ensure positioning context for absolute positioning of close button */
        }

    .close-button {
        position: absolute;
        top: 10px;
        right: 10px;
        font-size: 24px;
        background: none;
        border: none;
        cursor: pointer;
        color: #aaa;
        }

    .close-button:hover {
        color: #000;
        }

    #snackbar {
        visibility: hidden;
        min-width: 250px;
        margin-left: -125px;
        background-color: #333;
        color: #fff;
        text-align: center;
        border-radius: 2px;
        padding: 16px;
        position: fixed;
        z-index: 1;
        left: 50%;
        bottom: 30px;
        position: absolute
        z-index: 999;
        }

    #snackbar.show {
        visibility: visible;
        animation: fadein 0.5s, fadeout 0.5s 2.5s;
        }

    #snackbar.error {
        background-color: #f44336;
        }

    @keyframes fadein {
        from {
            bottom: 0;
            opacity: 0;
            }

        to {
            bottom: 30px;
            opacity: 1;
            }
        }

    @keyframes fadeout {
        from {
            bottom: 30px;
            opacity: 1;
            }

        to {
            bottom: 0;
            opacity: 0;
            }
        }

    .mdl-select-workaround {
        border-style: solid;
        border-color: #e0e0e0;
        border-width: 0 0 1px 0;
        color: #525151;
        font-family: 'Roboto', sans-serif;
        font-size: 1.4em;
        font-weight: 400;
        outline: 0;
        margin-top: 1.4em;
        margin-left: 0;
        width: 250px;
        text-transform: capitalize;
        }

    .active {
        color: #424242;
        }

    .colorred {
        color: red;
        }
</style>
<table id="example" class="mdl-data-table mdl-js-data-table mdl-shadow--6dp example"
       style="margin: 0 auto; width: 100%;">
    <thead style="font-size: 18px; font-family: Poppins; font-weight: 200;">
    <tr>
        <th style="font-size: 18px;">Company</th>
        <th style="font-size: 18px;">Symbol</th>
        <th style="font-size: 18px;">Price</th>
        <th style="font-size: 18px;">Changes</th>
        <th style="font-size: 18px;">Sector</th>
        <th style="font-size: 18px;">Peers</th>
        <th style="font-size: 18px;">Add Note</th>
        <th style="font-size: 18px;">Remove</th>
    </tr>
    </thead>
    <tbody>
    {{#each recentStocks}}
        <tr>
            <td><img class="micro-image" style="height: 30px; width: 30px; margin: 10px;" src="{{image}}"/>
                <a class="stock-link" href="/stocks/{{symbol}}" data-symbol="{{symbol}}">{{name}}</a>
            </td>
            <td>{{symbol}}</td>
            <td>$ {{price}}</td>
            <td class="changes" data-symbol="{{symbol}}">Loading...</td>
            <td class="sector" data-symbol="{{symbol}}">Loading...</td>
            <td class="peers" data-symbol="{{symbol}}">Loading...</td>
            <td>
                <button data-symbol="{{symbol}}" id="add-note"
                        class="mdl-button mdl-js-button mdl-button--icon header-icon add-note-button">
                    <i class="material-icons">description</i>
                </button>
            </td>
            <td>
                <button data-symbol="{{symbol}}"
                        class="delete-stock-btn mdl-button mdl-js-button mdl-button--icon header-icon">
                    <i class="material-icons">close</i>
                </button>
            </td>
        </tr>
    {{/each}}
    </tbody>
</table>
<div class="form-container" style="background-color: #1B1B1F">
    <button id="closeForm" class="close-button">
    <span class="material-symbols-outlined">
      close</span>
    </button>
    <h2>Add Note</h2>
    <form id="noteForm">
        <script>$("#symbol").val($("#symbol option:first").val());</script>
        <select id="symbol" name="symbol" class="mdl-select-workaround">
            {{#each recentStocks}}
                <option value="{{name}}" selected="1">{{name}}</option>
            {{/each}}

        </select>
        <select id="status" name="status" class="mdl-select-workaround">
            <option value="Private" selected>Private</option>
            <option value="Public">Public</option>
        </select>
        <div class="form-group">
            <label for="title">Title</label>
            <textarea id="title" name="title" rows="1" required></textarea>
        </div>
        <div class="form-group">
            <label for="note" style="text-size: ">Note</label>
            <textarea id="note" name="note" rows="8" required></textarea>
        </div>
        <div class="form-group">
            <button type="submit">Submit</button>
        </div>
    </form>
</div>
<div id="snackbar"></div>
<div id="popupChart" style="display:none;">
    <div id="chartdiv" style="width: 100%; height: 400px;"></div>
</div>
<script>
    $(document).ready(function () {
        // API key and base URL for Twelve Data API
        const apiKey = "18af8459babe4cfd9cc177b5ec0b3966";
        const baseURL = "https://api.twelvedata.com/time_series";

        // Event listener for hovering over peers in the td.peers element
        $('.peers').each(function () {
            const peers = $(this).text().split(',').map(peer => peer.trim());

            // Split the peers into individual spans for hover interaction
            const peerElements = peers.map(peer => `<span class="peer-item" data-symbol="${peer}">${peer}</span>`);
            $(this).html(peerElements.join(', '));

            // Event listener for hover over a peer
            $(this).find('.peer-item').on('mouseenter', function () {
                const selectedPeer = $(this).data('symbol');
                loadChart(selectedPeer);

                // Show the popup near the hovered element
                $('#popupChart').css({
                    display: 'block',
                    top: $(this).offset().top + 20,
                    left: $(this).offset().left
                });
            }).on('mouseleave', function () {
                // Hide the popup when the mouse leaves the peer
                $('#popupChart').hide();
            });
        });

        // Function to load chart data for a selected peer
        function loadChart(symbol) {
            // Fetch YTD data for the selected peer
            $.get(`${baseURL}?symbol=${symbol}&interval=1day&start_date=2024-01-01&apikey=${apiKey}`, function (data) {
                if (data.values) {
                    // Prepare data for amCharts
                    const chartData = data.values.map(item => ({
                        date: new Date(item.datetime),
                        value: parseFloat(item.close),
                    })).reverse();

                    // Create chart
                    am4core.useTheme(am4themes_animated);
                    const chart = am4core.create("chartdiv", am4charts.XYChart);
                    chart.data = chartData;

                    const dateAxis = chart.xAxes.push(new am4charts.DateAxis());
                    const valueAxis = chart.yAxes.push(new am4charts.ValueAxis());

                    const series = chart.series.push(new am4charts.LineSeries());
                    series.dataFields.valueY = "value";
                    series.dataFields.dateX = "date";
                    series.tooltipText = "{value}";

                    chart.cursor = new am4charts.XYCursor();
                    chart.scrollbarX = new am4core.Scrollbar();

                    // Set chart title
                    chart.titles.create().text = `YTD Data for ${symbol}`;
                } else {
                    alert("Error fetching data for " + symbol);
                }
            });
        }

        // Close the chart popup when clicked outside
        $(document).mouseup(function (e) {
            const popup = $("#popupChart");
            if (!popup.is(e.target) && popup.has(e.target).length === 0) {
                popup.hide();
            }
        });
    });
</script>
<script>
    $(document).ready(function () {
        $('.peers').each(function () {
            const apiKeyFMP = '6KxNCfsAg4MRZqA04ZNhmrjNJxbq29ec';
            const apiKeySeekingAlpha = 'dce0130264mshe2e1fe77d4fa23cp1336cdjsn53a8ebfbcec7';
            const symbol = $(this).data('symbol');
            const peersCell = $(this);

            fetch(`https://seeking-alpha.p.rapidapi.com/symbols/get-peers?symbol=${symbol}`, {
                "method": "GET",
                "headers": {
                    "x-rapidapi-host": "seeking-alpha.p.rapidapi.com",
                    "x-rapidapi-key": 'dce0130264mshe2e1fe77d4fa23cp1336cdjsn53a8ebfbcec7'
                }
            })
                    .then(response => response.json())
                    .then(data => {
                        if (data && data.data && data.data.length) {
                            const peers = data.data.slice(0, 3).map(peer => {
                                return `<a href="/stocks/${peer.attributes.slug}">${peer.attributes.name}</a>`;
                            }).join(', ');
                            peersCell.html(peers);
                        } else {
                            peersCell.text('N/A');
                        }
                    })
                    .catch(error => {
                        console.error('Error fetching peers data:', error);
                        peersCell.text('Error');
                    });
        });
    });
</script>
<script>
    $(document).ready(function () {
        // Handle click on delete button
        $('.delete-stock-btn').on('click', function () {
            // Get the symbol of the stock to be deleted
            var symbol = $(this).data('symbol');

            // Confirm deletion
            if (confirm('Are you sure you want to delete this stock?')) {
                // Store reference to the current button element
                var $button = $(this);

                // Make AJAX request to delete the stock
                $.ajax({
                    type: 'DELETE',
                    url: `/user/user-stocks/${symbol}`, // Adjust URL if necessary
                    success: function (response) {
                        // Remove the row from the table
                        $button.closest('tr').remove();

                        // Show snackbar with success message
                        showSnackbar('Stock removed successfully!');
                    },
                    error: function (error) {
                        // Show snackbar with error message
                        showSnackbar('Error removing stock.', true);
                        console.log(error); // Log error for debugging
                    }
                });
            }
        });

        // Function to display snackbar
        function showSnackbar(message, isError = false) {
            var snackbar = $('#snackbar');
            snackbar.text(message);
            snackbar.removeClass('error');
            if (isError) {
                snackbar.addClass('error');
            }
            snackbar.addClass('show');
            setTimeout(function () {
                snackbar.removeClass('show');
            }, 3000); // Hide after 3 seconds
        }
    });
</script>
<!-- TD COLORING FOR NEGATIVE NUMBERS -->
<!-- PEERS -->
<!-- SECTORS -->
<script>
    $(document).ready(function () {
        const apiKeyFMP = 'ouqIpA71oCd4XeYeIslXEoCcxYygUWnv';
        const apiKeySeekingAlpha = 'dce0130264mshe2e1fe77d4fa23cp1336cdjsn53a8ebfbcec7';

        $('.sector').each(function () {
            const symbol = $(this).data('symbol');
            const sectorCell = $(this);

            fetch(`https://financialmodelingprep.com/api/v3/profile/${symbol}?apikey=${apiKeyFMP}`)
                    .then(response => response.json())
                    .then(data => {
                        if (data && data[0] && data[0].sector) {
                            sectorCell.text(data[0].sector);
                        } else {
                            sectorCell.text('N/A');
                        }
                    })
                    .catch(error => {
                        console.error('Error fetching sector data:', error);
                        sectorCell.text('Error');
                    });
        });


    });
</script>
<script>
    $(document).ready(function () {
        // Get the value of the first cell with the class name .stock-link
        var firstStockLink = $(".stock-link").first().text();

        // Set the value of the first option in the select element
        $("#symbol option:first").val(firstStockLink).text(firstStockLink);
    });
</script>
<script>
    $(document).ready(function () {
        const apiKey = '6KxNCfsAg4MRZqA04ZNhmrjNJxbq29ec';
        const symbols = [];

        // Gather all symbols from the table
        $('#example tbody tr').each(function () {
            const symbol = $(this).find('td').eq(1).text().trim();
            symbols.push(symbol);
        });

        // Fetch stock changesPercentage
        const url = `https://financialmodelingprep.com/api/v3/quote/${symbols.join(',')}?apikey=${apiKey}`;

        $.getJSON(url, function (data) {
            data.forEach(stock => {
                const changePercentage = stock.changesPercentage;
                const symbol = stock.symbol;
                $(`td.changes[data-symbol='${symbol}']`).text(`${changePercentage.toFixed(2)}%`);
            });
        });
    });
</script>
<script>
    $('.add-note-button').on('click', function () {
        $('.form-container').show();
    });
    $('#closeForm').on('click', function () {
        $('.form-container').hide(); // Hide the form container
    });
</script>
<script>
    $(document).ready(function () {
        // Close button click handler

        // Form submission handler (simulated)
        $('#noteForm').on('submit', function (e) {
            e.preventDefault();
            var symbol = $('#symbol').val();
            var note = $('#note').val();
            var title = $('#title').val();
            // Simulated AJAX request
            console.log("Submitting note for symbol:", symbol, "with note:", note);

            // Close modal (simulated)
            $('.form-container').hide();
        });

        // Show form container when clicking on Add Note button
        $('.add-note-button').on('click', function () {
            $('.form-container').show();
        });
    });
</script>
<script>
    $(document).ready(function () {
        // Show form container when clicking on Add Note button
        $('.add-note-button').on('click', function () {
            // Get the company name from the row where the button was clicked
            var companyName = $(this).closest('tr').find('td').eq(0).text().trim();

            // Set the selected value of the symbol dropdown to the company name
            $('#symbol').val(companyName);

            // Show the form container
            $('.form-container').show();
        });

        // Close button click handler
        $('#closeForm').on('click', function () {
            $('.form-container').hide(); // Hide the form container
        });

        // Form submission handler
        $('#noteForm').on('submit', function (e) {
            e.preventDefault();
            var symbol = $('#symbol').val();
            var status = $('#status').val();
            var note = $('#note').val();
            var title = $('#title').val();
            var date = Date.now();

            // Post the note to the server
            $.ajax({
                type: 'POST',
                url: '/user/add-note',  // Update this URL to your actual endpoint
                data: {symbol: symbol, note: note, title: title, status: status, date: date},
                success: function (response) {
                    // Show snackbar on success
                    showSnackbar('Note on ' + symbol + 'added successfully!');
                    $('#symbol').val('');
                    $('#note').val('');
                    $('#status').val('');
                },
                error: function (error) {
                    // Show snackbar on error
                    showSnackbar('Error adding note.', true);
                    console.log(error); // Passing true to indicate an error
                }
            });
        });

        // Function to display snackbar
        function showSnackbar(message, isError = false) {
            var snackbar = $('#snackbar');
            snackbar.text(message);
            snackbar.removeClass('error');
            if (isError) {
                snackbar.addClass('error');
            }
            snackbar.addClass('show');
            setTimeout(function () {
                snackbar.removeClass('show');
            }, 3000); // Hide after 3 seconds
        }
    });
</script>
<script>
    $(document).ready(function () {
        // Show form container when clicking on Add Note button
        $('.add-note-button').on('click', function () {
            // Get the company name from the row where the button was clicked
            var companyName = $(this).closest('tr').find('td').eq(0).text().trim();

            // Set the selected value of the symbol dropdown to the company name
            $('#symbol').val(companyName);

            // Show the form container
            $('.form-container').show();
        });

        // Close button click handler
        $('#closeForm').on('click', function () {
            $('.form-container').hide(); // Hide the form container
        });

        // Form submission handler
        $('#noteForm').on('submit', function (e) {
            e.preventDefault();
            var symbol = $('#symbol').val();
            var status = $('#status').val();
            var note = $('#note').val();
            var title = $('#title').val();
            var date = Date.now();

            // Post the note to the server
            $.ajax({
                type: 'POST',
                url: '/stocks/add-note',  // Update this URL to your actual endpoint
                data: {symbol: symbol, note: note, title: title, status: status, date: date},
                success: function (response) {
                    // Show snackbar on success
                    showSnackbar('Note added successfully!');
                    $('#symbol').val('');
                    $('#note').val('');
                    $('#status').val('');
                },
                error: function (error) {
                    // Show snackbar on error
                    showSnackbar('Error adding note.', true);
                    console.log(error); // Passing true to indicate an error
                }
            });
        });

        // Function to display snackbar
        function showSnackbar(message, isError = false) {
            var snackbar = $('#snackbar');
            snackbar.text(message);
            snackbar.removeClass('error');
            if (isError) {
                snackbar.addClass('error');
            }
            snackbar.addClass('show');
            setTimeout(function () {
                snackbar.removeClass('show');
            }, 3000); // Hide after 3 seconds
        }
    });
</script>
<script>
    $(document).ready(function () {

        $('.changes').each(function () {

            var cellvalue = $.trim($(this).text());
            if (cellvalue.substring(0, 1) == '-') {
                $(this).wrapInner('<strong class="colorred"></strong>');
            }
        });

    });
</script>