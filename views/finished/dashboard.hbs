<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
<script src="https://cdn.amcharts.com/lib/4/core.js"></script>
<script src="https://cdn.amcharts.com/lib/4/charts.js"></script>
<script src="https://cdn.amcharts.com/lib/4/themes/dark.js"></script>
<script src="https://cdn.amcharts.com/lib/4/themes/animated.js"></script>


<style>
    .tab-button {
        text-transform: none;
        font-family: 'Poppins'
            /* Disable uppercase */
        ;
    }

    #chartdiv1 {
        width: 100%;
        height: 300px;
        background-color: #1B1B1F;
        border-radius: 10px;
    }

    .colorred {
        color: red;
    }

    .positive {
        color: green;
    }

    .negative {
        color: red;
    }

    #chartdiv2 {
        width: 100%;
        height: 300px;
        background-color: #1B1B1F;
    }

    #chartdiv3 {
        width: 100%;
        height: 300px;
        background-color: #1B1B1F;
    }

    .example {
        max-width: 100%;

    }

    .example th {
        font-size: 14px;
        border: none;
    }
    table { border-collapse:collapse }
</style>

<header style="background-color: #1b1b1f;" style="position: fixed">
    <div class="mdl-grid">
        <div class="mdl-cell mdl-cell--2-col">
            <button class="mdl-button mdl-js-button tab-button" style="color: gray"
                onclick="opencategory('Equities', this)">Equities</button>
        </div>
        <div class="mdl-cell mdl-cell--2-col">
            <button class="mdl-button mdl-js-button tab-button" style="color: gray"
                onclick="opencategory('Rates', this)">Rates</button>
        </div>
        <div class="mdl-cell mdl-cell--2-col">
            <button class="mdl-button mdl-js-button tab-button" style="color: gray"
                onclick="opencategory('Commodities', this)">Commodities</button>
        </div>
        <div class="mdl-cell mdl-cell--2-col">
            <button class="mdl-button mdl-js-button tab-button" style="color: gray"
                onclick="opencategory('Currencies', this)">Currencies</button>
        </div>
        <div class="mdl-cell mdl-cell--2-col">
            <button class="mdl-button mdl-js-button tab-button" style="color: gray"
                onclick="opencategory('Real Estate', this)">Real Estate</button>
        </div>
    </div>
</header>

<div id="Equities" class="w3-container category">
    <p style="font-size: 24px; color:#37eeb9; font-family: Poppins; margin-top: 25px;">Equities Dashboard</p>
    <div class="container">
        <div class="mdl-grid">
            <div class="mdl-cell mdl-cell--4-col">
                <div id="chartdiv1" class="mdl-shadow--6dp"></div>
            </div>
            <div class="mdl-cell mdl-cell--4-col">
                <div id="chartdiv2" class="mdl-shadow--6dp"></div>
            </div>
            <div class="mdl-cell mdl-cell--4-col">
                <div id="chartdiv3" class="mdl-shadow--6dp"></div>
            </div>
        </div>
    </div>

    <div class="mdl-grid">
        <div class="mdl-cell mdl-cell--6-col">
            <p style="font-size: 24px; color:#37eeb9; font-family: Poppins; margin-top: 25px;">Largest Gains</p>
            <table class="example" class="mdl-data-table mdl-js-data-table mdl-shadow--6dp example"
                style="width: 100%;">
                <thead style="font-family: Poppins; font-weight: 200;">
                    <tr>
                        <th>Ticker</th>
                        <th style=" font-family: Poppins">Company</th>
                        <th>Change %</th>
                        <th>Add to Portfolio</th>

                    </tr>
                </thead>
                <tbody>
                    {{#each gainers}}
                    <tr>
                        <td><a class="stock-link" href="/stocks/{{ticker}}" data-symbol="{{ticker}}">{{ticker}} </a
                                style="color: #2CEFAC"></td>
                        <td>{{companyName}}</td>

                        <td>{{changesPercentage}}%</td>

                        <td style="text-align:center !important">
                            <i class="material-icons checkmark-icon"
                                style="display: none; color: #37E38B; text-align: center !important;">check_circle</i>
                            <button class="mdl-button mdl-js-button mdl-button--icon header-icon add-stock-button"
                                data-symbol="{{ticker}}">
                                <i class="material-icons">add</i>
                            </button>
                        </td>
                    </tr>
                    {{/each}}
                </tbody>
            </table>
        </div>
        <div class="mdl-cell mdl-cell--6-col">
            <p style="font-size: 24px; color:#37eeb9; font-family: Poppins; margin-top: 25px;">Largest Losses</p>
            <table class="example" class="mdl-data-table mdl-js-data-table mdl-shadow--6dp example"
                style="width: 100%;">
                <thead style="  font-family: Poppins; font-weight: 200;">
                    <tr>

                        <th>Symbol</th>
                        <th style=" font-family: Poppins">Company</th>
                        <th>Change %</th>
                        <th>Add to Portfolio</th>

                    </tr>
                </thead>
                <tbody>
                    {{#each losers}}
                    <tr>
                        <td><a class="stock-link" href="/stocks/{{ticker}}" data-symbol="{{ticker}}">{{ticker}} </a
                                style="color: #2CEFAC"></td>
                        <td>{{companyName}}</td>
                        <td>{{changesPercentage}}%</td>
                          <td style="text-align:center !important">
                            <i class="material-icons checkmark-icon"
                                style="display: none; color: #37E38B; text-align: center !important">check_circle</i>
                            <button class="mdl-button mdl-js-button mdl-button--icon header-icon add-stock-button"
                                data-symbol="{{ticker}}">
                                <i class="material-icons">add</i>
                            </button>
                        </td>
                    </tr>
                    {{/each}}
                </tbody>
            </table>
        </div>
    </div>


    <p style="font-size: 24px; color:#37eeb9; font-family: Poppins; margin-top: 25px;">Sector Performance</p>
    <table class="example" class="mdl-data-table mdl-js-data-table mdl-shadow--6dp example" style="width: 100%;">
        <thead style=" font-size: 18px; font-family: Poppins; font-weight: 200;">
        <tr>
            <th style=" font-size: 18px; font-family: Poppins; border: none">Sector</th>
            <th  style=" font-size: 18px;">Change %</th>
            <th  style="font-size: 18px;">Add Note</th>
        </tr>
        </thead>
        <tbody>
        {{#each sectors}}
            <tr>
                <td style="border: none;">{{sector}}</td>
                <td>{{changesPercentage}}</td>
                <td>

                    <button class="add-note-button mdl-button mdl-js-button mdl-button--icon">
                        <i class="material-icons">description</i>
                    </button>
                </td>
            </tr>
        {{/each}}
        </tbody>
    </table>

</div>
<!-- Include amCharts library -->
<script src="https://cdn.amcharts.com/lib/4/core.js"></script>
<script src="https://cdn.amcharts.com/lib/4/charts.js"></script>
<script src="https://cdn.amcharts.com/lib/4/themes/animated.js"></script>



<!-- HTML container for the chart -->


<div id="snackbar"></div>
<div id="Rates" class="w3-container category" style="display:none">
     <h2>Select Your Designated Rates from <a href="/rates/all-rates">The Rates Page</a></h2>
<!--<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Dashboard</title>
  <script src="https://cdn.amcharts.com/lib/4/core.js"></script>
  <script src="https://cdn.amcharts.com/lib/4/charts.js"></script>
  <script src="https://cdn.amcharts.com/lib/4/themes/animated.js"></script>
  <style>
    #charts-container {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
      gap: 20px;
    }
    .chart-div {
      width: 100%;
      height: 400px;
    }
  </style>
</head>
<body>

  <h1>Economic Indicators Dashboard</h1>

  <div id="charts-container">
    {{#each fredChartData}}
      <div style="width: 100%;"class="chart-div" id="{{@key}}-chart"></div>
    {{/each}}
  </div>

  <script>
    // Import amCharts theme
    am4core.useTheme(am4themes_animated);

    // FRED Data passed from the backend
    const fredChartData = {{{json fredChartData}}}; // Use triple curly braces to pass raw JSON

    // Iterate over each FRED series and create charts
    Object.keys(fredChartData).forEach(seriesId => {
      let chart = am4core.create(`${seriesId}-chart`, am4charts.XYChart);
      chart.data = fredChartData[seriesId].map(item => ({
        date: new Date(item.date),
        value: item.value
      }));

      // Create date axis
      let dateAxis = chart.xAxes.push(new am4charts.DateAxis());
      dateAxis.renderer.minGridDistance = 50;

      // Create value axis
      let valueAxis = chart.yAxes.push(new am4charts.ValueAxis());

      // Create series
      let series = chart.series.push(new am4charts.LineSeries());
      series.dataFields.valueY = "value";
      series.dataFields.dateX = "date";
      series.tooltipText = "{value}";
      series.strokeWidth = 2;

      // Add a cursor
      chart.cursor = new am4charts.XYCursor();
    });
  </script>

</body>
</html>

-->
</div>

<div id="Commodities" class="w3-container category" style="display:none">
    <h2>Select Your Designated Commodities from <a href="/commodities/all-commodities">The Commodities Page</a></h2>
    <p>Commodity markets overview.</p>
</div>

<div id="Currencies" class="w3-container category" style="display:none">
 <h2>Select Your Designated Currencies from <a href="/currencies/all-currencies">The Currencies Page</a></h2>
    <p>Currency exchange and markets.</p>
</div>






<script>
    $(document).ready(function () {
        // Function to fetch user stocks and update the UI based on user stocks
        function updateUIWithUserStocks() {
            $.ajax({
                method: 'GET',
                url: '/stocks/stocks-json', // Replace with your endpoint to get user stocks
                success: function (userStocks) {
                    var userStocksSet = new Set(userStocks.map(stock => stock.symbol));

                    // Log to check user stocks returned from the server
                    console.log('User stocks:', userStocks);

                    // Iterate over each 'add-stock-button' and update the UI based on user stocks
                    $('.add-stock-button').each(function () {
                        var symbol = $(this).data('symbol');

                        // Log the symbol for each button
                        console.log('Stock symbol:', symbol);

                        if (userStocksSet.has(symbol)) {
                            $(this).siblings('.checkmark-icon').show();
                            $(this).hide(); // Hide the add button
                        }
                    });

                    // Upgrade MDL components in case of any changes
                    componentHandler.upgradeDom();
                },
                error: function (error) {
                    console.error('Error fetching user stocks:', error);
                    var data = {
                        message: 'Error fetching user stocks!',
                        timeout: 3000 // Display duration in milliseconds (3 seconds)
                    };
                    snackbarContainer.MaterialSnackbar.showSnackbar(data);
                }
            });
        }

        // Initial call to update the UI
        updateUIWithUserStocks();

        // Snackbar initialization
        var snackbarContainer = document.querySelector('#snackbar');

        // Add stock button click event
        $('.add-stock-button').on('click', function () {
            var symbol = $(this).data('symbol'); // Get the symbol from data attribute
            var addButton = $(this); // Reference to the add button clicked

            // Log the symbol being added
            console.log('Adding stock symbol:', symbol);

            // Send an AJAX request to add the stock using the symbol
            $.ajax({
                method: 'POST',
                url: '/user/user-stocks', // Replace with your endpoint
                data: { search: symbol },
                success: function (response) {
                    // Log the server response
                    console.log('Server response:', response);

                    if (response.status === 'exists') { // Adjust this condition based on your backend response
                        var data = {
                            message: 'Stock already exists!',
                            timeout: 3000 // Display duration in milliseconds (3 seconds)
                        };
                        snackbarContainer.MaterialSnackbar.showSnackbar(data);
                    } else {
                        console.log('Stock added successfully:', response); // Example success message

                        // Replace add button with checkmark icon
                        addButton.hide(); // Hide the add button
                        addButton.siblings('.checkmark-icon').show(); // Show the checkmark icon

                        // Show snackbar with confirmation message
                        var data = {
                            message: 'Stock added successfully!',
                            timeout: 3000 // Display duration in milliseconds (3 seconds)
                        };
                        snackbarContainer.MaterialSnackbar.showSnackbar(data);
                    }

                    // Upgrade MDL components after DOM manipulation
                    componentHandler.upgradeDom();
                },
                error: function (error) {
                    console.error('Error adding stock:', error); // Example error handling
                    var data = {
                        message: 'Error adding stock!',
                        timeout: 3000 // Display duration in milliseconds (3 seconds)
                    };
                    snackbarContainer.MaterialSnackbar.showSnackbar(data);
                }
            });
        });
    });
</script>
















<script>
    function opencategory(categoryName, element) {
        var i;
        var x = document.getElementsByClassName("category");
        var buttons = document.getElementsByClassName("tab-button");

        // Hide all content
        for (i = 0; i < x.length; i++) {
            x[i].style.display = "none";
        }

        // Remove custom background color from all buttons
        for (i = 0; i < buttons.length; i++) {
            buttons[i].style.backgroundColor = "";
        }

        // Show the selected category and change button background color
        document.getElementById(categoryName).style.display = "block";
        element.style.backgroundColor = "#37EEB9"; // Apply custom background color to clicked button
    }
</script>





<script>
    am4core.ready(function () {
        // Use the theme
        am4core.useTheme(am4themes_animated);

        // Create chart instance
        var chart = am4core.create("chartdivfred", am4charts.XYChart);

        // Set chart data
        var data = {{ json ../fredChartData.T10Y2Y
    }};

    // Set chart data
    chart.data = data;
    console.log(data)
    // Create axes
    var dateAxis = chart.xAxes.push(new am4charts.DateAxis());
    dateAxis.renderer.labels.template.fill = am4core.color("#ffffff");
    dateAxis.renderer.grid.template.stroke = am4core.color("#ffffff");
    dateAxis.renderer.grid.template.strokeOpacity = 0.2;

    var valueAxis = chart.yAxes.push(new am4charts.ValueAxis());
    valueAxis.renderer.labels.template.fill = am4core.color("#ffffff");
    valueAxis.renderer.grid.template.stroke = am4core.color("#ffffff");
    valueAxis.renderer.grid.template.strokeOpacity = 0.2;

    // Create series
    var series = chart.series.push(new am4charts.LineSeries());
    series.dataFields.valueY = "value";
    series.dataFields.dateX = "date";
    series.strokeWidth = 2;
    series.tooltipText = "{valueY}";
    series.stroke = am4core.color("#37EFBA");

    // Add cursor
    chart.cursor = new am4charts.XYCursor();

    // Add title
    var title = chart.titles.create();
    title.text = "10Y-2Y Treasury Yield Spread";
    title.fontSize = 20;
    title.marginBottom = 10;
    title.fill = am4core.color("#37EFBA");

    // Add legend
    chart.legend = new am4charts.Legend();
    chart.legend.labels.template.fill = am4core.color("#ffffff");
    });
</script>


<script>
    $(document).ready(function () {
        const apiKey = '010e466600dc4f32ab787125e9a0e701'; // Replace with your Twelve Data API key

        function fetchYTD(symbol) {
            const url = `https://api.twelvedata.com/time_series?symbol=${symbol}&interval=1day&start_date=2024-01-01&end_date=2024-12-31&apikey=${apiKey}`;

            return $.ajax({
                url: url,
                method: 'GET'
            });
        }

        function updateYTDData(symbol, ytd) {
            $(`.ytd[data-symbol="${symbol}"]`).text(ytd.toFixed(2) + '%');
        }

        $('.ytd').each(function () {
            const symbol = $(this).data('symbol');

            fetchYTD(symbol).done(function (response) {
                if (response && response.values && response.values.length > 0) {
                    const startPrice = parseFloat(response.values[response.values.length - 1].close);
                    const endPrice = parseFloat(response.values[0].close);
                    const ytd = ((endPrice - startPrice) / startPrice) * 100;

                    updateYTDData(symbol, ytd);
                } else {
                    updateYTDData(symbol, NaN);
                }
            }).fail(function () {
                updateYTDData(symbol, NaN);
            });
        });
    });
</script>
<script>
    function colorNumbers() {
        const table = document.getElementById('example');
        const rows = table.getElementsByTagName('tr');

        for (let i = 1; i < rows.length; i++) { // Start from 1 to skip the header row
            const cell = rows[i].getElementsByTagName('td')[0];
            const number = parseFloat(cell.textContent);

            if (number > 0) {
                cell.classList.add('positive');
            } else if (number < 0) {
                cell.classList.add('negative');
            }
        }
    }

    // Call the function to apply the colors
    colorNumbers();
</script>
<script>
    $(document).ready(function () {

        $('.changes').each(function () {

            var cellvalue = $.trim($(this).text());
            if (cellvalue.substring(0, 1) == '-') {
                $(this).wrapInner('<strong class="colorred"></strong>');
            }
        });

    });
</script>
<!-- =============SECTORS================== -->
<script>
    $(document).ready(function () {
        const apiKeyFMP = '6KxNCfsAg4MRZqA04ZNhmrjNJxbq29ec';
        const apiKeySeekingAlpha = 'a67d439d85mshfdcbdbdd5eea656p104667jsnea28aefe1cc7';

        $('.sector').each(function () {
            const symbol = $(this).data('symbol');
            const sectorCell = $(this);

            fetch(`https://financialmodelingprep.com/api/v3/profile/${symbol}?apikey=${apiKeyFMP}`)
                .then(response => response.json())
                .then(data => {
                    if (data && data[0] && data[0].sector) {
                        sectorCell.text(data[0].sector);
                    } else {
                        sectorCell.text('N/A');
                    }
                })
                .catch(error => {
                    console.error('Error fetching sector data:', error);
                    sectorCell.text('Error');
                });
        });


    });
</script>
<!--===========================peers============================= -->
<script>
    $(document).ready(function () {
        $('.peers').each(function () {
            const apiKeyFMP = '6KxNCfsAg4MRZqA04ZNhmrjNJxbq29ec';
            const apiKeySeekingAlpha = 'dce0130264mshe2e1fe77d4fa23cp1336cdjsn53a8ebfbcec7';
            const symbol = $(this).data('symbol');
            const peersCell = $(this);

            fetch(`https://seeking-alpha.p.rapidapi.com/symbols/get-peers?symbol=${symbol}`, {
                "method": "GET",
                "headers": {
                    "x-rapidapi-host": "seeking-alpha.p.rapidapi.com",
                    "x-rapidapi-key": 'dce0130264mshe2e1fe77d4fa23cp1336cdjsn53a8ebfbcec7'
                }
            })
                .then(response => response.json())
                .then(data => {
                    if (data && data.data && data.data.length) {
                        const peers = data.data.slice(0, 3).map(peer => {
                            return `<a href="/stocks/${peer.attributes.slug}">${peer.attributes.name}</a>`;
                        }).join(', ');
                        peersCell.html(peers);
                    } else {
                        peersCell.text('N/A');
                    }
                })
                .catch(error => {
                    console.error('Error fetching peers data:', error);
                    peersCell.text('Error');
                });
        });
    });
</script>
<!--CHANGES CALCULATION -->
<script>
    $(document).ready(function () {
        const apiKey = '6KxNCfsAg4MRZqA04ZNhmrjNJxbq29ec';
        const symbols = [];

        // Gather all symbols from the table
        $('#example tbody tr').each(function () {
            const symbol = $(this).find('td').eq(1).text().trim();
            symbols.push(symbol);
        });

        // Fetch stock changesPercentage
        const url = `https://financialmodelingprep.com/api/v3/quote/${symbols.join(',')}?apikey=${apiKey}`;

        $.getJSON(url, function (data) {
            data.forEach(stock => {
                const changePercentage = stock.changesPercentage;
                const symbol = stock.symbol;
                $(`td.changes[data-symbol='${symbol}']`).text(`${changePercentage.toFixed(2)}%`);
            });
        });
    });
</script>
<!--= ===========================================DELETE STOCK==================== -->
<script>
    $(document).ready(function () {
        // Handle click on delete button
        $('.delete-stock-btn').on('click', function () {
            // Get the symbol of the stock to be deleted
            var symbol = $(this).data('symbol');

            // Confirm deletion
            if (confirm('Are you sure you want to delete this stock?')) {
                // Store reference to the current button element
                var $button = $(this);

                // Make AJAX request to delete the stock
                $.ajax({
                    type: 'DELETE',
                    url: `/user/user-stocks/${symbol}`, // Adjust URL if necessary
                    success: function (response) {
                        // Remove the row from the table
                        $button.closest('tr').remove();

                        // Show snackbar with success message
                        showSnackbar('Stock removed successfully!');
                    },
                    error: function (error) {
                        // Show snackbar with error message
                        showSnackbar('Error removing stock.', true);
                        console.log(error); // Log error for debugging
                    }
                });
            }
        });

        // Function to display snackbar
        function showSnackbar(message, isError = false) {
            var snackbar = $('#snackbar');
            snackbar.text(message);
            snackbar.removeClass('error');
            if (isError) {
                snackbar.addClass('error');
            }
            snackbar.addClass('show');
            setTimeout(function () {
                snackbar.removeClass('show');
            }, 3000); // Hide after 3 seconds
        }
    });
</script>


<!-- ==========================CHARTDIV============================ -->
<script>

    const apiKey = '010e466600dc4f32ab787125e9a0e701'
    fetch(`https://api.twelvedata.com/time_series?symbol=wmt&interval=1week&start_date=2024-01-01&outputsize=5000&apikey=${apiKey}&order=asc`)
        .then(response => {
            if (!response.ok) {
                throw new Error(`HTTP error! Status: ${response.status}`);
            }
            return response.json();
        })
        .then(data => {
            // Create chart instance
            var chart = am4core.create("chartDiv", am4charts.XYChart);

            // Set theme to dark
            chart.colors.list = [am4core.color("#37EFBA"), am4core.color("#EFA84A"), am4core.color("#6A9D58"), am4core.color("#D35E60"), am4core.color("#9565B0")];
            chart.background.fill = am4core.color("#1B1B1F");
            chart.responsive.enabled = true;
            chart.dateFormatter.inputDateFormat = "yyyy-MM-dd";

            // Create axes
            var dateAxis = chart.xAxes.push(new am4charts.DateAxis());
            dateAxis.renderer.labels.template.fill = am4core.color("rgb(165, 164, 164)"); // Date axis labels color
            dateAxis.renderer.grid.template.stroke = am4core.color("#AAAAAA"); // Light grey grid lines
            dateAxis.renderer.grid.template.strokeOpacity = 0.15; // Grid line opacity (adjusted to 0.25)
            dateAxis.renderer.labels.template.fontSize = 12;

            var valueAxis = chart.yAxes.push(new am4charts.ValueAxis());
            valueAxis.renderer.labels.template.fill = am4core.color("rgb(165, 164, 164)"); // Value axis labels color
            valueAxis.renderer.grid.template.stroke = am4core.color("#AAAAAA"); // Light grey grid lines
            valueAxis.renderer.grid.template.strokeOpacity = 0.15; // Grid line opacity (adjusted to 0.25)
            valueAxis.renderer.labels.template.fontSize = 12;

            // Create series
            var series = chart.series.push(new am4charts.LineSeries());
            series.dataFields.valueY = "close";
            series.dataFields.dateX = "datetime";
            series.strokeWidth = 2;
            series.tooltipText = "{valueY}";
            series.tooltip.getFillFromObject = false;
            series.tooltip.background.fill = am4core.color("#333333");
            series.tooltip.label.fill = am4core.color("#FFFFFF");
            series.tooltip.label.fontSize = 12;
            series.tooltip.pointerOrientation = "vertical";

            // Set data
            chart.data = data.values;

            // Add cursor
            chart.cursor = new am4charts.XYCursor();

            // Add title
            var title = chart.titles.create();
            title.text = "SP500";
            title.fontSize = 20;
            title.marginBottom = 10;
            title.fill = am4core.color("#37EFBA");

            title.fontFamily = "Montserrat"; //
            // Add legend
            chart.legend = new am4charts.Legend();
            chart.legend.labels.template.fill = am4core.color("#FFFFFF"); // Legend text color
            chart.legend.fontSize = 12;



        })
        .catch(error => {
            console.error('Error fetching data:', error);
        });

</script>

<!--=============================CHRTDIV1 SP500 ----------------------->
<script>

    fetch(`https://api.twelvedata.com/time_series?symbol=spx&interval=1day&start_date=2024-01-01&outputsize=5000&apikey=${apiKey}&order=asc`)
        .then(response => {
            if (!response.ok) {
                throw new Error(`HTTP error! Status: ${response.status}`);
            }
            return response.json();
        })
        .then(data => {
            // Create chart instance
            var chart = am4core.create("chartdiv1", am4charts.XYChart);

            // Set theme to dark
            chart.colors.list = [am4core.color("#37EFBA"), am4core.color("#EFA84A"), am4core.color("#6A9D58"), am4core.color("#D35E60"), am4core.color("#9565B0")];
            chart.background.fill = am4core.color("#1B1B1F");
            chart.responsive.enabled = true;
            chart.dateFormatter.inputDateFormat = "yyyy-MM-dd";

            // Create axes
            var dateAxis = chart.xAxes.push(new am4charts.DateAxis());
            dateAxis.renderer.labels.template.fill = am4core.color("rgb(165, 164, 164)"); // Date axis labels color
            dateAxis.renderer.grid.template.stroke = am4core.color("#AAAAAA"); // Light grey grid lines
            dateAxis.renderer.grid.template.strokeOpacity = 0.15; // Grid line opacity (adjusted to 0.25)
            dateAxis.renderer.labels.template.fontSize = 12;

            var valueAxis = chart.yAxes.push(new am4charts.ValueAxis());
            valueAxis.renderer.labels.template.fill = am4core.color("rgb(165, 164, 164)"); // Value axis labels color
            valueAxis.renderer.grid.template.stroke = am4core.color("#AAAAAA"); // Light grey grid lines
            valueAxis.renderer.grid.template.strokeOpacity = 0.15; // Grid line opacity (adjusted to 0.25)
            valueAxis.renderer.labels.template.fontSize = 12;

            // Create series
            var series = chart.series.push(new am4charts.LineSeries());
            series.dataFields.valueY = "close";
            series.dataFields.dateX = "datetime";
            series.strokeWidth = 2;
            series.tooltipText = "{valueY}";
            series.tooltip.getFillFromObject = false;
            series.tooltip.background.fill = am4core.color("#333333");
            series.tooltip.label.fill = am4core.color("#FFFFFF");
            series.tooltip.label.fontSize = 12;
            series.tooltip.pointerOrientation = "vertical";

            // Set data
            chart.data = data.values;

            // Add cursor
            chart.cursor = new am4charts.XYCursor();

            // Add title
            var title = chart.titles.create();
            title.text = "Standard & Poors 500 Index";
            title.fontSize = 20;
            title.marginBottom = 10;
            title.fill = am4core.color("#37EFBA");

            title.fontFamily = "Montserrat"; //
            // Add legend




        })
        .catch(error => {
            console.error('Error fetching data:', error);
        });

</script>
<!-- =============================CHARTDIV2 NASDAQ ==================== -->
<script>

    fetch(`https://api.twelvedata.com/time_series?symbol=ndx&interval=1day&start_date=2024-01-01&outputsize=5000&apikey=${apiKey}&order=asc`)
        .then(response => {
            if (!response.ok) {
                throw new Error(`HTTP error! Status: ${response.status}`);
            }
            return response.json();
        })
        .then(data => {
            // Create chart instance
            var chart = am4core.create("chartdiv2", am4charts.XYChart);

            // Set theme to dark
            chart.colors.list = [am4core.color("#37EFBA"), am4core.color("#EFA84A"), am4core.color("#6A9D58"), am4core.color("#D35E60"), am4core.color("#9565B0")];
            chart.background.fill = am4core.color("#1B1B1F");
            chart.responsive.enabled = true;
            chart.dateFormatter.inputDateFormat = "yyyy-MM-dd";

            // Create axes
            var dateAxis = chart.xAxes.push(new am4charts.DateAxis());
            dateAxis.renderer.labels.template.fill = am4core.color("rgb(165, 164, 164)"); // Date axis labels color
            dateAxis.renderer.grid.template.stroke = am4core.color("#AAAAAA"); // Light grey grid lines
            dateAxis.renderer.grid.template.strokeOpacity = 0.15; // Grid line opacity (adjusted to 0.25)
            dateAxis.renderer.labels.template.fontSize = 12;

            var valueAxis = chart.yAxes.push(new am4charts.ValueAxis());
            valueAxis.renderer.labels.template.fill = am4core.color("rgb(165, 164, 164)"); // Value axis labels color
            valueAxis.renderer.grid.template.stroke = am4core.color("#AAAAAA"); // Light grey grid lines
            valueAxis.renderer.grid.template.strokeOpacity = 0.15; // Grid line opacity (adjusted to 0.25)
            valueAxis.renderer.labels.template.fontSize = 12;

            // Create series
            var series = chart.series.push(new am4charts.LineSeries());
            series.dataFields.valueY = "close";
            series.dataFields.dateX = "datetime";
            series.strokeWidth = 2;
            series.tooltipText = "{valueY}";
            series.tooltip.getFillFromObject = false;
            series.tooltip.background.fill = am4core.color("#333333");
            series.tooltip.label.fill = am4core.color("#FFFFFF");
            series.tooltip.label.fontSize = 12;
            series.tooltip.pointerOrientation = "vertical";

            // Set data
            chart.data = data.values;

            // Add cursor
            chart.cursor = new am4charts.XYCursor();

            // Add title
            var title = chart.titles.create();
            title.text = "NASDAQ 100 Index";
            title.fontSize = 20;
            title.marginBottom = 10;
            title.fill = am4core.color("#37EFBA");

            title.fontFamily = "Montserrat"; //
            // Add legend




        })
        .catch(error => {
            console.error('Error fetching data:', error);
        });

</script>
<!-- ==============================CHARTDIV3 DJIA =================== -->
<script>

    fetch(`https://api.twelvedata.com/time_series?symbol=dji&interval=1day&start_date=2024-01-01&outputsize=5000&apikey=${apiKey}&order=asc`)
        .then(response => {
            if (!response.ok) {
                throw new Error(`HTTP error! Status: ${response.status}`);
            }
            return response.json();
        })
        .then(data => {
            // Create chart instance
            var chart = am4core.create("chartdiv3", am4charts.XYChart);

            // Set theme to dark
            chart.colors.list = [am4core.color("#37EFBA"), am4core.color("#EFA84A"), am4core.color("#6A9D58"), am4core.color("#D35E60"), am4core.color("#9565B0")];
            chart.background.fill = am4core.color("#1B1B1F");
            chart.responsive.enabled = true;
            chart.dateFormatter.inputDateFormat = "yyyy-MM-dd";

            // Create axes
            var dateAxis = chart.xAxes.push(new am4charts.DateAxis());
            dateAxis.renderer.labels.template.fill = am4core.color("rgb(165, 164, 164)"); // Date axis labels color
            dateAxis.renderer.grid.template.stroke = am4core.color("#AAAAAA"); // Light grey grid lines
            dateAxis.renderer.grid.template.strokeOpacity = 0.15; // Grid line opacity (adjusted to 0.25)
            dateAxis.renderer.labels.template.fontSize = 12;

            var valueAxis = chart.yAxes.push(new am4charts.ValueAxis());
            valueAxis.renderer.labels.template.fill = am4core.color("rgb(165, 164, 164)"); // Value axis labels color
            valueAxis.renderer.grid.template.stroke = am4core.color("#AAAAAA"); // Light grey grid lines
            valueAxis.renderer.grid.template.strokeOpacity = 0.15; // Grid line opacity (adjusted to 0.25)
            valueAxis.renderer.labels.template.fontSize = 12;

            // Create series
            var series = chart.series.push(new am4charts.LineSeries());
            series.dataFields.valueY = "close";
            series.dataFields.dateX = "datetime";
            series.strokeWidth = 2;
            series.tooltipText = "{valueY}";
            series.tooltip.getFillFromObject = false;
            series.tooltip.background.fill = am4core.color("#333333");
            series.tooltip.label.fill = am4core.color("#FFFFFF");
            series.tooltip.label.fontSize = 12;
            series.tooltip.pointerOrientation = "vertical";

            // Set data
            chart.data = data.values;

            // Add cursor
            chart.cursor = new am4charts.XYCursor();

            // Add title
            var title = chart.titles.create();
            title.text = "Dow Jones Industrials";
            title.fontSize = 20;
            title.marginBottom = 10;
            title.fill = am4core.color("#37EFBA");

            title.fontFamily = "Montserrat"; //
            // Add legend




        })
        .catch(error => {
            console.error('Error fetching data:', error);
        });

</script>



<script>
    $(document).ready(function () {
        // Get the value of the first cell with the class name .stock-link
        var firstStockLink = $(".stock-link").first().text();

        // Set the value of the first option in the select element
        $("#symbol option:first").val(firstStockLink).text(firstStockLink);
    });
</script>



<script>
    $('.add-note-button').on('click', function () {
        $('.form-container').show();
    });
    $('#closeForm').on('click', function () {
        $('.form-container').hide(); // Hide the form container
    });
</script>

<script>
    $(document).ready(function () {
        // Close button click handler

        // Form submission handler (simulated)
        $('#noteForm').on('submit', function (e) {
            e.preventDefault();
            var symbol = $('#symbol').val();
            var note = $('#note').val();
            var title = $('#title').val();
            // Simulated AJAX request
            console.log("Submitting note for symbol:", symbol, "with note:", note);

            // Close modal (simulated)
            $('.form-container').hide();
        });

        // Show form container when clicking on Add Note button
        $('.add-note-button').on('click', function () {
            $('.form-container').show();
        });
    });

</script>

<script>
    $(document).ready(function () {
        // Show form container when clicking on Add Note button
        $('.add-note-button').on('click', function () {
            // Get the company name from the row where the button was clicked
            var companyName = $(this).closest('tr').find('td').eq(0).text().trim();

            // Set the selected value of the symbol dropdown to the company name
            $('#symbol').val(companyName);

            // Show the form container
            $('.form-container').show();
        });

        // Close button click handler
        $('#closeForm').on('click', function () {
            $('.form-container').hide(); // Hide the form container
        });

        // Form submission handler
        $('#noteForm').on('submit', function (e) {
            e.preventDefault();
            var symbol = $('#symbol').val();
            var status = $('#status').val();
            var note = $('#note').val();
            var title = $('#title').val();
            var date = Date.now();

            // Post the note to the server
            $.ajax({
                type: 'POST',
                url: '/user/add-note',  // Update this URL to your actual endpoint
                data: { symbol: symbol, note: note, title: title, status: status, date: date },
                success: function (response) {
                    // Show snackbar on success
                    showSnackbar('Note on ' + symbol + 'added successfully!');
                    $('#symbol').val('');
                    $('#note').val('');
                    $('#status').val('');
                },
                error: function (error) {
                    // Show snackbar on error
                    showSnackbar('Error adding note.', true);
                    console.log(error); // Passing true to indicate an error
                }
            });
        });

        // Function to display snackbar
        function showSnackbar(message, isError = false) {
            var snackbar = $('#snackbar');
            snackbar.text(message);
            snackbar.removeClass('error');
            if (isError) {
                snackbar.addClass('error');
            }
            snackbar.addClass('show');
            setTimeout(function () {
                snackbar.removeClass('show');
            }, 3000); // Hide after 3 seconds
        }
    });

</script>
<script>
    $(document).ready(function () {
        // Show form container when clicking on Add Note button
        $('.add-note-button').on('click', function () {
            // Get the company name from the row where the button was clicked
            var companyName = $(this).closest('tr').find('td').eq(0).text().trim();

            // Set the selected value of the symbol dropdown to the company name
            $('#symbol').val(companyName);

            // Show the form container
            $('.form-container').show();
        });

        // Close button click handler
        $('#closeForm').on('click', function () {
            $('.form-container').hide(); // Hide the form container
        });

        // Form submission handler
        $('#noteForm').on('submit', function (e) {
            e.preventDefault();
            var symbol = $('#symbol').val();
            var status = $('#status').val();
            var note = $('#note').val();
            var title = $('#title').val();
            var date = Date.now();

            // Post the note to the server
            $.ajax({
                type: 'POST',
                url: '/user/add-note',  // Update this URL to your actual endpoint
                data: { symbol: symbol, note: note, title: title, status: status, date: date },
                success: function (response) {
                    // Show snackbar on success
                    showSnackbar('Note added successfully!');
                    $('#symbol').val('');
                    $('#note').val('');
                    $('#status').val('');
                },
                error: function (error) {
                    // Show snackbar on error
                    showSnackbar('Error adding note.', true);
                    console.log(error); // Passing true to indicate an error
                }
            });
        });

        // Function to display snackbar
        function showSnackbar(message, isError = false) {
            var snackbar = $('#snackbar');
            snackbar.text(message);
            snackbar.removeClass('error');
            if (isError) {
                snackbar.addClass('error');
            }
            snackbar.addClass('show');
            setTimeout(function () {
                snackbar.removeClass('show');
            }, 3000); // Hide after 3 seconds
        }
    });



<script>
    am4core.ready(function() {
        // Create chart instance
        var chart = am4core.create("chartdiv-tree", am4charts.TreeMap);

        // Define data
        chart.data = [{
            name: "Technology",
            children: [{
                name: "MSFT",
                value: 2.13
            }, {
                name: "ORCL",
                value: 0.83
            }, {
                name: "ADBE",
                value: 1.03
            }, {
                name: "PALO ALTO",
                value: -1.67
            }, {
                name: "CRM",
                value: 1.39
            }]
        }, {
            name: "Consumer Electronics",
            children: [{
                name: "AAPL",
                value: 1.16
            }, {
                name: "SNPS",
                value: 3.44
            }]
        }, {
            name: "Semiconductors",
            children: [{
                name: "NVDA",
                value: 8.15
            }, {
                name: "AMD",
                value: 4.92
            }, {
                name: "QCOM",
                value: 1.95
            }]
        }, {
            name: "Communication Services",
            children: [{
                name: "GOOG",
                value: 1.43
            }, {
                name: "META",
                value: 1.40
            }, {
                name: "TMUS",
                value: 1.04
            }, {
                name: "VZ",
                value: -1.02
            }]
        }];

        // Set data fields
        chart.dataFields.value = "value";
        chart.dataFields.name = "name";
        chart.dataFields.children = "children";

        // Set up color set for distinct colors
        chart.colors = new am4core.ColorSet();
        chart.colors.step = 10; // Use a different step to ensure colors are varied

        // Configure labels for each node
        var level1 = chart.seriesTemplates.create("0");

        // Make the text label for each rectangle visible
        level1.columns.template.fillOpacity = 0.8;
        level1.columns.template.strokeOpacity = 1;

        var bullet = level1.bullets.push(new am4charts.LabelBullet());
        bullet.locationX = 0.5;
        bullet.locationY = 0.5;
        bullet.label.text = "{name}"; // Shows the name (e.g., MSFT, AAPL)
        bullet.label.fill = am4core.color("#ffffff"); // Label text color
        bullet.label.fontSize = 12;
        bullet.label.truncate = false; // Prevents truncation of text

        // Add titles (name of top-level categories)
        var title = chart.seriesTemplates.create("1");
        var bulletTitle = title.bullets.push(new am4charts.LabelBullet());
        bulletTitle.locationX = 0.5;
        bulletTitle.locationY = 0.5;
        bulletTitle.label.text = "{name}"; // Shows the top-level name (e.g., Technology)
        bulletTitle.label.fill = am4core.color("#ffffff");
        bulletTitle.label.fontSize = 16;
        bulletTitle.label.truncate = false; // Prevent truncation of titles
        bulletTitle.label.wrap = true; // Allows wrapping of text
        bulletTitle.label.maxWidth = 150; // Maximum width for wrapping

        // Set color steps for varied colors
        chart.colors.step = 2;

        // Color each company separately
        chart.dataFields.color = "color";
    });
</script>
